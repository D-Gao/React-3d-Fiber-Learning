/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/models/wind_line.glb -o src/models/Wind.tsx --typescript -r public 
*/

import * as THREE from "three";
import { shaderMaterial, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import vertexShader from "@/experiences/Car/shaders/wind/vertexShader.glsl";
import fragmentShader from "@/experiences/Car/shaders/wind/fragmentShader.glsl";
import { Object3DNode, extend, useFrame } from "@react-three/fiber";
import { useEffect, useRef } from "react";

const CustomWindMaterial = new THREE.ShaderMaterial({
  side: THREE.DoubleSide,
  uniforms: {
    vTime: { value: 0 },
    color: { value: new THREE.Color(1, 0, 0.13) },
    vProgress: { value: 0.8 },
    opacity: { value: 1 },
    random: { value: Math.random() },
  },
  transparent: true,
  // depthTest: false,
  depthWrite: false,
  blending: THREE.AdditiveBlending,
  vertexShader: vertexShader,
  fragmentShader: fragmentShader,
  toneMapped: true,
});

const uniforms: {
  uTime: number;
} = {
  uTime: 0,
};

const WindMaterial = shaderMaterial(uniforms, vertexShader, fragmentShader);

extend({ WindMaterial });

declare module "@react-three/fiber" {
  interface ThreeElements {
    windMaterial: Object3DNode<THREE.ShaderMaterial, typeof WindMaterial> &
      typeof uniforms;
  }
}

type GLTFResult = GLTF & {
  nodes: {
    NURBS_路径072: THREE.Mesh;
    NURBS_路径073: THREE.Mesh;
    NURBS_路径074: THREE.Mesh;
    NURBS_路径071: THREE.Mesh;
    NURBS_路径070: THREE.Mesh;
  };
  materials: {};
};

export function Wind(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials, scene } = useGLTF(
    "/models/wind_line.glb"
  ) as GLTFResult;

  const groupRef = useRef<THREE.Group>(null);

  useEffect(() => {
    /* scene.traverse((item) => {
      if ((item as THREE.Mesh).isMesh) {
        (item as THREE.Mesh).material = CustomWindMaterial;
        (item as THREE.Mesh).material.uniforms.random.value = Math.random();
      }
    }); */

    console.log(groupRef.current);

    if (groupRef.current) {
      groupRef.current.children.forEach((item) => {
        if ((item as THREE.Mesh).isMesh) {
          (item as THREE.Mesh).material = CustomWindMaterial;
          (
            (item as THREE.Mesh).material as THREE.ShaderMaterial
          ).uniforms.random.value = Math.random();
        }
      });
    }
  }, [nodes]);

  useFrame((state, delta) => {
    CustomWindMaterial.uniforms.vTime.value = state.clock.elapsedTime;
  });

  return (
    <group {...props} dispose={null} ref={groupRef}>
      <mesh
        geometry={nodes.NURBS_路径072.geometry}
        material={nodes.NURBS_路径072.material}
        position={[0, 0.268, 0]}
        scale={[1, 1, 2.13]}
      />
      <mesh
        geometry={nodes.NURBS_路径073.geometry}
        material={nodes.NURBS_路径073.material}
        position={[0, 0, 0.978]}
        scale={[1, 1, 1.543]}
      />
      <mesh
        geometry={nodes.NURBS_路径074.geometry}
        material={nodes.NURBS_路径074.material}
        position={[0, 0, -0.836]}
        scale={[1, 1, 1.405]}
      />
      <mesh
        geometry={nodes.NURBS_路径071.geometry}
        material={nodes.NURBS_路径071.material}
      />
      <mesh
        geometry={nodes.NURBS_路径070.geometry}
        material={nodes.NURBS_路径070.material}
      />
    </group>
  );
}

useGLTF.preload("/models/wind_line.glb");
