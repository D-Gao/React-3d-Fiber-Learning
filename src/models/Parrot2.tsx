/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/models/parrot2.glb -o src/models/Parrot2.tsx --typescript -r public 
*/

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type ActionName = "parrot_A_";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Mesh_0: THREE.Mesh;
  };
  materials: {
    Material_0: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Parrot2(props: JSX.IntrinsicElements["group"]) {
  const group = React.useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/models/parrot2.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    /* onsole.log(nodes);

    console.log(animations);
    console.log(actions["parrot_A_"]); */
    actions.parrot_A_?.play();

    console.log(nodes);
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="Mesh_0"
          geometry={nodes.Mesh_0.geometry}
          material={materials.Material_0}
          morphTargetDictionary={nodes.Mesh_0.morphTargetDictionary}
          morphTargetInfluences={nodes.Mesh_0.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/parrot2.glb");
