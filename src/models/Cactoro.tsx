/* eslint-disable @typescript-eslint/no-unused-vars */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/models/Cactoro.gltf -o src/models/Cactoro.tsx --typescript -r public 
*/

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";

type ActionName =
  | "Bite_Front"
  | "Dance"
  | "Death"
  | "HitRecieve"
  | "Idle"
  | "Jump"
  | "No"
  | "Walk"
  | "Yes";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Cube146: THREE.SkinnedMesh;
    Cube146_1: THREE.SkinnedMesh;
    Cube000: THREE.SkinnedMesh;
    Cube000_1: THREE.SkinnedMesh;
    Cube000_2: THREE.SkinnedMesh;
    Cube000_3: THREE.SkinnedMesh;
    Cube000_4: THREE.SkinnedMesh;
    Body: THREE.Bone;
    Head: THREE.Bone;
  };
  materials: {
    Cactoro_Main: THREE.MeshStandardMaterial;
    Cactoro_Secondary: THREE.MeshStandardMaterial;
    Cactoro_Red: THREE.MeshStandardMaterial;
    Eye_Black: THREE.MeshStandardMaterial;
    Eye_White: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

interface ExtraProps {
  hovered: boolean;
}

export function Cactoro({
  hovered,
  ...props
}: JSX.IntrinsicElements["group"] & ExtraProps) {
  const group = React.useRef<THREE.Group>(null);
  const { scene, materials, animations } = useGLTF("/models/Cactoro.gltf");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    const anim: ActionName = hovered ? "Dance" : "Idle";
    actions[anim]?.reset().fadeIn(0.5).play();
    return () => {
      actions[anim]?.fadeOut(0.5);
    };
  }, [hovered]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="CharacterArmature">
          <primitive object={nodes.Body} />
          <primitive object={nodes.Head} />
          <group name="Cactoro_Blob">
            <skinnedMesh
              name="Cube146"
              geometry={nodes.Cube146.geometry}
              material={materials.Cactoro_Main}
              skeleton={nodes.Cube146.skeleton}
            />
            <skinnedMesh
              name="Cube146_1"
              geometry={nodes.Cube146_1.geometry}
              material={materials.Cactoro_Secondary}
              skeleton={nodes.Cube146_1.skeleton}
            />
          </group>
          <group name="Cactoro_Blob001">
            <skinnedMesh
              name="Cube000"
              geometry={nodes.Cube000.geometry}
              material={materials.Cactoro_Main}
              skeleton={nodes.Cube000.skeleton}
            />
            <skinnedMesh
              name="Cube000_1"
              geometry={nodes.Cube000_1.geometry}
              material={materials.Cactoro_Secondary}
              skeleton={nodes.Cube000_1.skeleton}
            />
            <skinnedMesh
              name="Cube000_2"
              geometry={nodes.Cube000_2.geometry}
              material={materials.Cactoro_Red}
              skeleton={nodes.Cube000_2.skeleton}
            />
            <skinnedMesh
              name="Cube000_3"
              geometry={nodes.Cube000_3.geometry}
              material={materials.Eye_Black}
              skeleton={nodes.Cube000_3.skeleton}
            />
            <skinnedMesh
              name="Cube000_4"
              geometry={nodes.Cube000_4.geometry}
              material={materials.Eye_White}
              skeleton={nodes.Cube000_4.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/Cactoro.gltf");
